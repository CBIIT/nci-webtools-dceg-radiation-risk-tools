

import requests
import json
import datetime
import logging

from django.utils import timezone
from django.conf import settings
from django.db.models import Q

from fallout.celery import app
from celery.schedules import crontab

from .models import ExecutionTask, ExecutionState
from .constants import EXECUTE_STATE_EXECUTING, EXECUTE_STATE_COMPLETED, EXECUTE_STATE_FAILED, SUMMARY_REPORT, SESSION_FORM_KEY, SUMMARY_REPORT_ASP_TIMEOUT

# Get an instance of a logger
logger = logging.getLogger(__name__)

def get_report_data(execution_task):
    kw = {'randomseed': 99, 
          'sample_size': 100, 
          'web_flag': 1, 
          'fallout_version': settings.FALLOUT_VERSION, 
          'ade_version': settings.ADE_VERSION,
          'summary_rpt_timeout': SUMMARY_REPORT_ASP_TIMEOUT}

    kw.update(execution_task.form_data)
    
    # revise the date of birth information
    dob = datetime.datetime.strptime(kw['dob'], "%m/%d/%Y")
    kw['bda'] = dob.day
    kw['bmo'] = dob.month
    kw['byr'] = dob.year
    
    # revise hours outdoors
    if 'spent_hours_outdoors' in kw and kw['spent_hours_outdoors'] == 'on':
        kw['hours_outdoors'] = 'Not sure'
    
    # revise cancer diagnosis year to match expectation in ADE model
    if kw['diagnosed_cancer'] == 'No':
        kw['diag_year'] = 2040
    
    return kw

def set_false_server_response(execution_task):
    # Special case for scan site -- don't submit to actual Windows server.
    if getattr(settings, 'PRODUCTION', False):
        logger.error('Execution of false windows server for production site.')
    logger.warning('Executing false server ... results are not being generated by ADE.')
    execution_task.end_time = timezone.now()
    execution_task.response_code = getattr(settings, 'FALSE_WINDOWS_SERVER_RESPONSE_CODE', 200)
    execution_task.response_content = getattr(settings, 'FALSE_WINDOWS_SERVER_RESPONSE_CONTENT', 
                                              json.dumps({"messages":[],
                                                   "NTS_Global":[4.26255150615847,15.0826439250624,44.4494530782062,2.31318970261748,7.65560128422048,20.9646244246367,6.74239691472095,22.7382452092829,65.9276499961755],
                                                   "Pathway_Dose":[3.89277837839037,18.0305302697538,54.8613558636998,2.70682217365058E-02,0.242775470464482,0.71557568527544,0.264001988049305,1.62681592814323,4.55881131382561,0.356833699332687,0.931183462297024,1.85760153854252,0.141796665315796,0.24381544429412,0.363759039035919,1.06271886844064,1.66312463433025,2.34924999644615,6.74239691472095,22.7382452092829,65.9276499961755,0.889816238580886,2.80077486090474,6.86822661042791],
                                                   "Pathway_Dose_nts":[2.44229325754109,12.2474208828323,38.7867249164029,1.98974589951074E-02,0.164445369272187,0.474946848710371,0.174131030789278,1.08491614349161,3.13187513150607,0.2034902779662,0.594388703124144,1.24613214877057,0.141796665315796,0.24381544429412,0.363759039035919,0.447411437396135,0.747657382048062,1.22779347423359,4.26255150615847,15.0826439250624,44.4494530782062,0.56184693209021,1.84375021588794,4.59878523105875],
                                                   "Pathway_Dose_global":[1.14272516993421,5.78310938692149,18.0528226911744,6.95334519728421E-03,7.83301011922951E-02,0.262893760758979,7.42233006539644E-02,0.541899784651622,1.47523127844187,0.125188664381179,0.33679475917288,0.712236976337123,0,0,0,0.595823381247937,0.915467252282187,1.18072719171024,2.31318970261748,7.65560128422048,20.9646244246367,0.249583713625035,0.957024645016797,2.34456811083254],
                                                   "FIPS_WEB":[1001],
                                                   "total_future":[1.86000485551533E-03,2.05690112266903E-03,2.07545047194272E-03,2.31220925126049E-03],
                                                   "baseline_future":[1.77762558054223E-03,1.88386943384906E-03,1.88515412577745E-03,1.99680251864116E-03],
                                                   "pc":[2.04482183845506,6.78425218626418,8.70328322086239,20.2534176110003]}))
    execution_task.state = ExecutionState.objects.get(pk=EXECUTE_STATE_COMPLETED)
    execution_task.save()

@app.task(name='fallout.calculator.execute_report', queue=settings.CELERYQ)
def execute_report(execution_task_id):
    try:        
        execution_task = ExecutionTask.objects.get(pk=execution_task_id)
        execution_task.start_time = timezone.now()
        execution_task.state = ExecutionState.objects.get(pk=EXECUTE_STATE_EXECUTING)
        execution_task.save()
    
        r = requests.post('%s%s' % (settings.WINDOWS_SERVER, SUMMARY_REPORT), data=get_report_data(execution_task), headers={'user-agent':'Django App (%s)' % settings.BASE_URL})
        execution_task.end_time = timezone.now()
        execution_task.response_code = r.status_code
        execution_task.response_content = r.content.decode('utf-8')
        execution_task.state = ExecutionState.objects.get(pk=(EXECUTE_STATE_COMPLETED if execution_task.response_code == 200 else EXECUTE_STATE_FAILED))
        execution_task.save()
        if execution_task.state.id == EXECUTE_STATE_FAILED:
            logger.error('Execution report failed: %s' % str(execution_task.pk))
    except Exception as ex:
        logger.error('Execution report error: %s' % str(ex))
        execution_task.end_time = timezone.now()
        execution_task.state = ExecutionState.objects.get(pk=EXECUTE_STATE_FAILED)
        execution_task.exception = str(ex)
        execution_task.save()

@app.task(name='clean_execution_tasks')
def clean_execution_tasks():
    try:
        #for execution_task in ExecutionTask.objects.filter(Q(state_id=EXECUTE_STATE_FAILED) | (Q(state_id=EXECUTE_STATE_COMPLETED) & Q(end_time__lt=(timezone.now() - datetime.timedelta(days=1))))):
        for execution_task in ExecutionTask.objects.all():
            execution_task.delete()
    except Exception as ex:
        logger.error('Execution clean error: %s' % str(ex))
